@startuml
package "core" #DDDDDD{
    package "dto" #FFAAAA{
        package "rdv" #DDDDDD{
            class "InputRdvDTO"{
                - string $date
                - string $time
                - string $praticien_id
                - string $patient_id
                - string $speciality_id
            }
            class "RdvDTO"{
                - string $id
                - string $date
                - string $time
                - string $praticien_name
                - string $patient_name
                - string $speciality_label
                - string $patient_status
                - string $status
            }
            class "RdvIsDisponibleDTO"{
                - string $date
                - string $time
                - string $praticien_id
            }
        }
    }
    package "domain" #FFAAAA{
        package "entities" #DDDDDD{

            package "rdv" #FFAAAA{
                class "RDV"{
                    - string $id
                    - string $date
                    - string $time
                    - string $status
                }

            }
            package "praticien" #FFAAAA{
                class "Praticien"{
                    - string $id
                    - string $name
                }
                class "Speciality" {
                    - string $id
                    - string $label
                }
            }
            package "patient" #FFAAAA{
                class "Patient"{
                    - string $id
                    - string $name
                    - int $numSecu
                    - string $address
                    - string $phone
                    - string $status
                }

            }
            "RDV" "1"--"1" "Praticien"
            "RDV" "1"--"1" "Patient"
            "Praticien" "1"--"*" "Speciality"

        }
    }
    package "service" #FFAAAA{

            package "rdv" #DDDDDD{
                interface "RDVServiceInterface"{
                    + getRDVById(string $rdv_id): RdvDTO
                    + getRDVsByPatient(string $patient_id): List<RdvDTO>
                    + getRDVsByPraticien(string $praticien_id): List<RdvDTO>
                    + getRDVsBySpeciality(string $speciality_id): List<RdvDTO>
                    + getRDVsByDate(string $date): List<RdvDTO>
                    + getRDVByDateTime(string $date, string $time): RdvDTO
                    + getRDVs(): List<RdvDTO>
                    + isDisponible(RdvIsDisponibleDTO $rdv): bool
                    + addRDV(InputRdvDTO $rdv): RdvDTO
                    + updateRDV(string $rdv_id, InputRdvDTO $rdvI): RdvDTO
                    + deleteRDV(string $rdv_id): void
                }
                class "RDVService"{
                    + getRDVById(string $rdv_id): RdvDTO
                    + getRDVsByPatient(string $patient_id): List<RdvDTO>
                    + getRDVsByPraticien(string $praticien_id): List<RdvDTO>
                    + getRDVsBySpeciality(string $speciality_id): List<RdvDTO>
                    + getRDVsByDate(string $date): List<RdvDTO>
                    + getRDVByDateTime(string $date, string $time): RdvDTO
                    + getRDVs(): List<RdvDTO>
                    + getRDVsStatusOk(): List<RdvDTO>
                    + getRDVsStatusKo(): List<RdvDTO>
                    + isDisponible(RdvIsDisponibleDTO $rdv): bool
                    + addRDV(InputRdvDTO $rdv): RdvDTO
                    + updateRDV(string $rdv_id, InputRdvDTO $rdvI): RdvDTO
                    + deleteRDV(string $rdv_id): void

                }
                exception "RDVNotFoundException"{
                    + __construct(string $message)
                }
                exception "RDVBadDataException"{
                    + __construct(string $message)
                }
                "RDVService" ..up|> "RDVServiceInterface"
                "RDVService" ..> "RDVNotFoundException"
                "RDVService" ..> "RDVBadDataException"
            }
    }

    package "interfaces" #FFAAAA{
        interface "NotificationServiceInterface"{
            + notifyClient(string $user_id, string $message): bool
        }
        interface "SaveInLogServiceInterface"{
            + save(string $rdv_id, string $message): bool
        }
    }

}

package "infrastructure" #DDDDDD{
    package "adapters" #FFAAAA{
        class "PHPMailerEmailNotificationAdapter"{
            - PHPMailer $mailer
            + __construct(PHPMailer $mailer)
            + notifyClient(string $user_id, string $message): bool
        }
        class "FileSaveInLogAdapter"{
            - string $path
            + __construct(string $path)
            + save(string $rdv_id, string $message): bool
        }

    }

    "PHPMailerEmailNotificationAdapter" ..up|> "NotificationServiceInterface"
    "FileSaveInLogAdapter" ..up|> "SaveInLogServiceInterface"
}
"RDVService" ..> "NotificationServiceInterface"
"RDVService" ..> "SaveInLogServiceInterface"
"RDVService" ..> "InputRdvDTO"
"RDVService" ..> "RdvDTO"
"RDVService" ..> "RdvIsDisponibleDTO"
@enduml